#!/usr/bin/python3
# -*- coding: utf-8 -*-
import os, sys

from typing import Any
from contextlib import contextmanager


def get_dict_value_multi_key(dict_: dict, key: Any) -> Any:
    """ Returns the Value of the given key in a dict with multiple keys per one value

        Args:
            key: key to search for its index
            dict_: dictionary to search in.

        Returns:
            Value the given key.
    """
    return {
        k: val
        for keys, val in dict_.items()
        for k in keys
    }.get(key, lambda: print("Incorrect Command!! Run [assistant help] to see the avilabile commands."))


class AssistantCommand:
    PROJECT_DIR = "(proj_dir)"

    def __init__(self):
        self.command = None
        self.args = None
        self.args_with_flags = None
        self.user_input = None
        self.args_concatenated = None
        self.assistant_commands = {
            ("services",): self.__services,
            ("--help", "-h"): self.__help,
            ("run", "start", "up"): self.__assistant_run,
            ("run-all", "start-all", "up-all"): self.__start_all,
            ("setup", "deploy"): self.__setup_all,
            ("-e setup", "-e deploy"): self.__environment_setup,
            ("-o setup", "-o deploy"): self.__assistant_os_setup,
            ("-s setup", "-s deploy"): self.__services_setup,

        }
        self.__create_command()

    def __create_command(self) -> None:
        """ Sets the Value of command to the defualt project directory.
        """
        self.command = f"cd {self.PROJECT_DIR}"

    def __assistant_run(self) -> None:
        """ Sets the Value of command to run the assistant.
        """
        self.command += " && .venv/bin/python -m assistant"

    def __services(self) -> None:
        """ Sets the Value of command to execute assistant system services.
        """
        self.command += " && cd services && bash system_services.sh"

    def __start_all(self) -> None:
        """ Sets the Value of command to lunch dizzy both assitant and system services.
        """
        self.command += f" && cd shells && bash lunch_dizzy.sh"

    def __setup_all(self) -> None:
        """ Sets the Value of command to deploy assistant OS setup and Enviroment setup.
        """
        self.__assistant_os_setup()
        self.command += f" && bash environment_setup.sh && wait && cd .."
        self.__services_setup()

    def __services_setup(self) -> None:
        """ Sets the Value of command to deploy assistant system services.
        """
        self.command += " && cd services && bash deploy.sh"

    def __environment_setup(self) -> None:
        """ Sets the Value of command to deploy or installs Enviroment setup.
        """
        self.command += f" && cd shells && bash environment_setup.sh"

    def __assistant_os_setup(self) -> None:
        """ Sets the Value of command to deploy assistant OS setup.
        """
        self.command += f" && cd shells && bash assistant_os_setup.sh"

    def __get_services_help(self) -> str:
        """ Returns the Value of command to display assistant services --help.
        """
        return f" {self.__services()} --help"

    def __str__(self) -> str:
        return """NAME
    assistant - dizzy assistant main command.
SYNOPSIS
    assistant [OPTION]...
OPTIONS
    Generic Program Information
        -h, --help 
            Output a usage message and exit.
        services
            Access assistant services.
            Run [assistant services --help] for information.
        run, start, up
            Starts the main assistant service 
        run-all, start-all, up-all
            Starts all assistant services along with the main assistant service
        setup, deploy
            Deploys or installs the assistant OS dependencies and deploys the environment setup    
        -e setup", -e deploy   
            Deploys or installs the environment setup
        -o setup, -o deploy 
            Deploys or installs assistant OS dependencies
        -s setup, -s deploy 
            Deploys or installs assistant services                         
AUTHOR
DizaynVIP tech."""

    def __help(self) -> None:
        """ Prints the Value of self to display assistant help guide.
        """
        print(self)
        exit(0)

    @contextmanager
    def __index_error_handling(self) -> None:
        """ Handles the Index error execption using context manger.
        """
        try:
            yield
        except IndexError:
            self.__help()

    def handle(self):
        """ Handle the Args received from terminal and executes them.
        """
        with self.__index_error_handling():
            self.args = sys.argv[1:]
            self.user_input = self.args[0]
            self.args_concatenated = " ".join(self.args[1:])
        if self.user_input[:1].__contains__("-"):  # Check if there is any flag ex(-e,-d)
            with self.__index_error_handling():
                self.args_with_flags = self.user_input + " " + self.args[1]
            # excute the command with flag ex(-e,-d)
            get_dict_value_multi_key(self.assistant_commands, self.args_with_flags)()
            self.command += f" {self.args_concatenated}"
            exit(os.system(self.command))
        # execute command without flag ex(-e,-d)
        get_dict_value_multi_key(self.assistant_commands, self.user_input)()
        self.command += f" {self.args_concatenated}"
        exit(os.system(self.command))


if __name__ == "__main__":
    AssistantCommand().handle()
